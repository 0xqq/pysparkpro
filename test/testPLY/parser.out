Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WHERE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> SELECT columns FROM TABLE END
Rule 3     recursive_columns -> recursive_columns COMMA COLUMN
Rule 4     recursive_columns -> COLUMN
Rule 5     columns -> STAR
Rule 6     columns -> recursive_columns

Terminals, with rules where they appear

COLUMN               : 3 4
COMMA                : 3
END                  : 2
FROM                 : 2
SELECT               : 2
STAR                 : 5
TABLE                : 2
WHERE                : 
error                : 

Nonterminals, with rules where they appear

columns              : 2
expression           : 1
recursive_columns    : 3 6
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . SELECT columns FROM TABLE END

    SELECT          shift and go to state 2

    expression                     shift and go to state 1
    statement                      shift and go to state 3

state 1

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 2

    (2) expression -> SELECT . columns FROM TABLE END
    (5) columns -> . STAR
    (6) columns -> . recursive_columns
    (3) recursive_columns -> . recursive_columns COMMA COLUMN
    (4) recursive_columns -> . COLUMN

    STAR            shift and go to state 7
    COLUMN          shift and go to state 5

    columns                        shift and go to state 4
    recursive_columns              shift and go to state 6

state 3

    (0) S' -> statement .



state 4

    (2) expression -> SELECT columns . FROM TABLE END

    FROM            shift and go to state 8


state 5

    (4) recursive_columns -> COLUMN .

    COMMA           reduce using rule 4 (recursive_columns -> COLUMN .)
    FROM            reduce using rule 4 (recursive_columns -> COLUMN .)


state 6

    (6) columns -> recursive_columns .
    (3) recursive_columns -> recursive_columns . COMMA COLUMN

    FROM            reduce using rule 6 (columns -> recursive_columns .)
    COMMA           shift and go to state 9


state 7

    (5) columns -> STAR .

    FROM            reduce using rule 5 (columns -> STAR .)


state 8

    (2) expression -> SELECT columns FROM . TABLE END

    TABLE           shift and go to state 10


state 9

    (3) recursive_columns -> recursive_columns COMMA . COLUMN

    COLUMN          shift and go to state 11


state 10

    (2) expression -> SELECT columns FROM TABLE . END

    END             shift and go to state 12


state 11

    (3) recursive_columns -> recursive_columns COMMA COLUMN .

    COMMA           reduce using rule 3 (recursive_columns -> recursive_columns COMMA COLUMN .)
    FROM            reduce using rule 3 (recursive_columns -> recursive_columns COMMA COLUMN .)


state 12

    (2) expression -> SELECT columns FROM TABLE END .

    $end            reduce using rule 2 (expression -> SELECT columns FROM TABLE END .)

